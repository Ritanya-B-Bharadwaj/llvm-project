# llvm/tools/optviz/CMakeLists.txt

# Define the tool's sources
set(OPT_VIZ_SOURCES
  src/main.cpp
  src/PassDriver.cpp
  src/IRDiffer.cpp
  src/SummaryGen.cpp
)

# Register as an LLVM tool
add_llvm_tool(optviz ${OPT_VIZ_SOURCES})

# Link against needed LLVM components
llvm_map_components_to_libnames(LLVM_OPT_VIZ_LIBS
  core
  support
  irreader
  option
)
target_link_libraries(optviz PRIVATE ${LLVM_OPT_VIZ_LIBS})

# Pull in the standard LLVM compile flags
llvm_update_compile_flags(optviz)

# ----------------------------------------------------------------------
# Third-party: libcurl for HTTP + nlohmann/json for JSON parsing
# ----------------------------------------------------------------------

# libcurl
find_package(CURL REQUIRED)
if(CURL_FOUND)
  message(STATUS "Found CURL: ${CURL_VERSION_STRING}")
  target_include_directories(optviz PRIVATE ${CURL_INCLUDE_DIRS})
  target_link_libraries(optviz PRIVATE ${CURL_LIBRARIES})
else()
  message(FATAL_ERROR "libcurl is required to build optviz (find_package(CURL) failed)")
endif()

# nlohmann/json.hpp (single-header)
find_path(NLOHMANN_JSON_INCLUDE_DIR
  NAMES nlohmann/json.hpp
  PATHS /opt/homebrew/include /usr/local/include /usr/include
)
if(NLOHMANN_JSON_INCLUDE_DIR)
  message(STATUS "Found nlohmann/json.hpp at ${NLOHMANN_JSON_INCLUDE_DIR}")
  # Mark it SYSTEM so its internal warnings are suppressed
  target_include_directories(optviz SYSTEM PRIVATE ${NLOHMANN_JSON_INCLUDE_DIR})
else()
  message(FATAL_ERROR "Could not locate nlohmann/json.hpp. Please brew install nlohmann-json or place it in an include path.")
endif()