{
    "number": 137841,
    "title": "[mlir][OpenMP] cancel(lation point) taskgroup LLVMIR",
    "body": "A cancel or cancellation point for taskgroup is always nested inside of a task inside of the taskgroup. For the task which is cancelled, it is that task which needs to be cleaned up: not the owning taskgroup. Therefore the cancellation branch handler is done in the conversion of the task not in conversion of taskgroup.\r\n\r\nI added a firstprivate clause to the test for cancel taskgroup to demonstrate that the block being branched to is the same block where mandatory cleanup code is added. Cancellation point follows exactly the same code path.",
    "created_at": "2025-04-29T16:30:19Z",
    "merged_at": "2025-05-08T10:15:59Z",
    "user": "tblah",
    "files": [
        "flang/docs/OpenMPSupport.md",
        "mlir/lib/Target/LLVMIR/Dialect/OpenMP/OpenMPToLLVMIRTranslation.cpp",
        "mlir/test/Target/LLVMIR/openmp-cancel.mlir",
        "mlir/test/Target/LLVMIR/openmp-cancellation-point.mlir",
        "mlir/test/Target/LLVMIR/openmp-todo.mlir"
    ],
    "commits": [
        "[mlir][OpenMP] cancel(lation point) taskgroup LLVMIR\n\nA cancel or cancellation point for taskgroup is always nested inside of\na task inside of the taskgroup. For the task which is cancelled, it is\nthat task which needs to be cleaned up: not the owning taskgroup.\nTherefore the cancellation branch handler is done in the conversion of\nthe task not in conversion of taskgroup.\n\nI added a firstprivate clause to the test for cancel taskgroup to\ndemonstrate that the block being branched to is the same block where\nmandatory cleanup code is added. Cancellation point follows exactly the\nsame code path.",
        "Add todo for cancelling a taskloop\n\nNo unit test can be written for this todo because there is no support at\nall for lowering taskloop.",
        "Keep calls to checkImplementationStatus"
    ]
}