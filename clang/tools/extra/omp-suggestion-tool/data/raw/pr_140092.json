{
    "number": 140092,
    "title": "[flang][OpenMP] use attribute for delayed privatization barrier",
    "body": "Fixes #136357\r\n\r\nThe barrier needs to go between the copying into firstprivate variables and the initialization call for the OpenMP construct (e.g. wsloop). There is no way of expressing this in MLIR because for delayed privatization that is all implicit (added in MLIR->LLVMIR conversion).\r\n\r\nThe previous approach put the barrier immediately before the wsloop (or similar). For delayed privatization, the firstprivate copy code would then be inserted after that, opening the possibility for the race observed in the bug report.\r\n\r\nThis patch solves the issue by instead setting an attribute on the mlir operation, which will instruct openmp dialect to llvm ir conversion to insert a barrier in the correct place.",
    "created_at": "2025-05-15T16:08:10Z",
    "merged_at": "2025-05-22T14:25:53Z",
    "user": "tblah",
    "files": [
        "flang/lib/Lower/OpenMP/DataSharingProcessor.cpp",
        "flang/lib/Lower/OpenMP/DataSharingProcessor.h",
        "flang/test/Lower/OpenMP/lastprivate-allocatable.f90",
        "flang/test/Lower/OpenMP/parallel-lastprivate-clause-scalar.f90",
        "flang/test/Lower/OpenMP/same_var_first_lastprivate.f90",
        "mlir/include/mlir/Dialect/OpenMP/OpenMPClauses.td",
        "mlir/include/mlir/Dialect/OpenMP/OpenMPOps.td",
        "mlir/lib/Conversion/SCFToOpenMP/SCFToOpenMP.cpp",
        "mlir/lib/Dialect/OpenMP/IR/OpenMPDialect.cpp",
        "mlir/lib/Target/LLVMIR/Dialect/OpenMP/OpenMPToLLVMIRTranslation.cpp",
        "mlir/test/Dialect/OpenMP/ops.mlir",
        "mlir/test/Target/LLVMIR/openmp-wsloop-private.mlir"
    ],
    "commits": [
        "[mlir][OpenMP] add attribute for privatization barrier\n\nA barrier is needed at the end of initialization/copying of private\nvariables if any of those variables is lastprivate. This ensures that\nall firstprivate variables receive the original value of the variable\nbefore the lastprivate clause overwrites it.\n\nPreviously this barrier was added by the flang fontend, but there is not\na reliable way to put the barrier in the correct place for delayed\nprivatization, and the OpenMP dialect could some day have other users.\nIt is important that there are safe ways to use the constructs available\nin the dialect.\n\nlastprivate is currently not modelled in the OpenMP dialect, and so\nthere is no way to reliably determine whether there were lastprivate\nvariables. Therefore the frontend will have to provide this information\nthrough this new attribute.\n\nPart of a series of patches to fix\nhttps://github.com/llvm/llvm-project/issues/136357",
        "[mlir][OpenMP] Add translation of private_barrier attr to LLVMIR",
        "[flang][OpenMP] use attribute for delayed privatization barrier\n\nFixes #136357\n\nThe barrier needs to go between the copying into firstprivate variables\nand the initialization call for the OpenMP construct (e.g. wsloop).\nThere is no way of expressing this in MLIR because for delayed\nprivatization that is all implicit (added in MLIR->LLVMIR conversion).\n\nThe previous approach put the barrier immediately before the wsloop (or\nsimilar). For delayed privatization, the firstprivate copy code would\nthen be inserted after that, opening the possibility for the race\nobserved in the bug report.\n\nThis patch solves the issue by instead setting an attribute on the mlir\noperation, which will instruct openmp dialect to llvm ir conversion to\ninsert a barrier in the correct place.",
        "Nit: add if statement around clauseOps usage"
    ]
}