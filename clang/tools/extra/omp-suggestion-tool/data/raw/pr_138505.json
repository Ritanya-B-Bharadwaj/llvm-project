{
    "number": 138505,
    "title": "[flang][fir] Add `fir.local` op for locality specifiers",
    "body": "Adds a new `fir.local` op to model `local` and `local_init` locality specifiers. This op is a clone of `omp.private`. In particular, this new op also models the privatization/localization logic of an SSA value in the `fir` dialect just like `omp.private` does for OpenMP.\r\n\r\nPR stack:\r\n- https://github.com/llvm/llvm-project/pull/137928\r\n- https://github.com/llvm/llvm-project/pull/138505 (this PR)\r\n- https://github.com/llvm/llvm-project/pull/138506\r\n- https://github.com/llvm/llvm-project/pull/138512\r\n- https://github.com/llvm/llvm-project/pull/138534\r\n- https://github.com/llvm/llvm-project/pull/138816",
    "created_at": "2025-05-05T11:09:08Z",
    "merged_at": "2025-05-07T12:00:06Z",
    "user": "ergawy",
    "files": [
        "flang/include/flang/Optimizer/Dialect/FIRAttr.td",
        "flang/include/flang/Optimizer/Dialect/FIROps.td",
        "flang/lib/Lower/Bridge.cpp",
        "flang/lib/Optimizer/Builder/FIRBuilder.cpp",
        "flang/lib/Optimizer/Dialect/FIROps.cpp",
        "flang/test/Fir/do_concurrent.fir",
        "flang/test/Fir/invalid.fir",
        "flang/test/Lower/do_concurrent.f90",
        "flang/test/Lower/do_concurrent_local_default_init.f90",
        "flang/test/Lower/loops.f90",
        "flang/test/Lower/loops3.f90",
        "flang/test/Lower/nsw.f90",
        "flang/test/Transforms/DoConcurrent/basic_host.f90",
        "flang/test/Transforms/DoConcurrent/locally_destroyed_temp.f90",
        "flang/test/Transforms/DoConcurrent/loop_nest_test.f90",
        "flang/test/Transforms/DoConcurrent/multiple_iteration_ranges.f90",
        "flang/test/Transforms/DoConcurrent/non_const_bounds.f90",
        "flang/test/Transforms/DoConcurrent/not_perfectly_nested.f90"
    ],
    "commits": [
        "[flang][fir] Lower `do concurrent` loop nests to `fir.do_concurrent`\n\nAdds support for lowering `do concurrent` nests from PFT to the new\n`fir.do_concurrent` MLIR op as well as its special terminator\n`fir.do_concurrent.loop` which models the actual loop nest.\n\nTo that end, this PR emits the allocations for the iteration variables\nwithin the block of the `fir.do_concurrent` op and creates a region for\nthe `fir.do_concurrent.loop` op that accepts arguments equal in number\nto the number of the input `do concurrent` iteration ranges.\n\nFor example, given the following input:\n```fortran\n   do concurrent(i=1:10, j=11:20)\n   end do\n```\nthe changes in this PR emit the following MLIR:\n```mlir\n    fir.do_concurrent {\n      %22 = fir.alloca i32 {bindc_name = \"i\"}\n      %23:2 = hlfir.declare %22 {uniq_name = \"_QFsub1Ei\"} : (!fir.ref<i32>) -> (!fir.ref<i32>, !fir.ref<i32>)\n      %24 = fir.alloca i32 {bindc_name = \"j\"}\n      %25:2 = hlfir.declare %24 {uniq_name = \"_QFsub1Ej\"} : (!fir.ref<i32>) -> (!fir.ref<i32>, !fir.ref<i32>)\n      fir.do_concurrent.loop (%arg1, %arg2) = (%18, %20) to (%19, %21) step (%c1, %c1_0) {\n        %26 = fir.convert %arg1 : (index) -> i32\n        fir.store %26 to %23#0 : !fir.ref<i32>\n        %27 = fir.convert %arg2 : (index) -> i32\n        fir.store %27 to %25#0 : !fir.ref<i32>\n      }\n    }\n```",
        "[flang][fir] Add `fir.local` op for locality specifiers\n\nAdds a new `fir.local` op to model `local` and `local_init` locality\nspecifiers. This op is a clone of `omp.private`. In particular, this new\nop also models the privatization/localization logic of an SSA value in\nthe `fir` dialect just like `omp.private` does for OpenMP.",
        "handle review comments",
        "add verifier tests"
    ]
}