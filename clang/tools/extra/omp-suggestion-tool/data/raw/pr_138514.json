{
    "number": 138514,
    "title": "[OpenMP][test] Make %p 0x prefix optional",
    "body": "Testing `openmp` on Solaris/amd64 shows a large number of failures, all due to the same issue:\r\n\r\n```\r\n# .---command stderr------------\r\n# | openmp/runtime/test/ompt/misc/interoperability.cpp:67:16: error: CHECK-SAME: expected string not found in input\r\n# | // CHECK-SAME: parent_task_frame.reenter={{0x[0-f]+}}\r\n# |                ^\r\n# | <stdin>:5:101: note: scanning from here\r\n# | 281474976710658: ompt_event_parallel_begin: parent_task_id=281474976710659, parent_task_frame.exit=0, parent_task_frame.reenter=7fffbedffe90, parallel_id=281474976710661, requested_team_size=2, codeptr_ra=408b8e, invoker=2\r\n```\r\n\r\nThe testsuite expects pointers to be printed with a `0x` prefix when using the `%p` format, while Solaris `libc` just prints them in hex without a prefix.\r\n\r\nHowever, this difference is completely benign.  ISO C (up to C23, 7.23.6.1) states\r\n\r\n```\r\np\tThe argument shall be a pointer to void or a pointer to a character\r\n\ttype. The value of the pointer is converted to a sequence of printing\r\n\tcharacters, in an implementation-defined manner.\r\n```\r\n\r\nI saw two ways around this:\r\n\r\n- replace every instance of `%p` with a macro (`KMP_PTR_FMT`, defined as `\"%p\"` or `\"0x%p\" as appropriate), or\r\n- adjust the testsuite to make the `0x` prefix optional\r\n\r\nThe second route seemed less intrusive and more readable, so that's what this patch does.  While large, it's also completely mechanical.\r\n\r\nTested on `amd64-pc-solaris2.11` and `x86_64-pc-linux-gnu`.",
    "created_at": "2025-05-05T12:00:08Z",
    "merged_at": "2025-05-10T07:50:08Z",
    "user": "rorth",
    "files": [
        "openmp/runtime/test/ompt/cancel/cancel_parallel.c",
        "openmp/runtime/test/ompt/cancel/cancel_taskgroup.c",
        "openmp/runtime/test/ompt/cancel/cancel_worksharing.c",
        "openmp/runtime/test/ompt/misc/api_calls_misc.c",
        "openmp/runtime/test/ompt/misc/control_tool.c",
        "openmp/runtime/test/ompt/misc/interoperability.cpp",
        "openmp/runtime/test/ompt/misc/runtime_error.c",
        "openmp/runtime/test/ompt/parallel/dynamic_enough_threads.c",
        "openmp/runtime/test/ompt/parallel/dynamic_not_enough_threads.c",
        "openmp/runtime/test/ompt/parallel/max_active_levels_serialized.c",
        "openmp/runtime/test/ompt/parallel/nested.c",
        "openmp/runtime/test/ompt/parallel/nested_lwt.c",
        "openmp/runtime/test/ompt/parallel/nested_serialized.c",
        "openmp/runtime/test/ompt/parallel/nested_serialized_task_frames.c",
        "openmp/runtime/test/ompt/parallel/nested_thread_num.c",
        "openmp/runtime/test/ompt/parallel/no_thread_num_clause.c",
        "openmp/runtime/test/ompt/parallel/normal.c",
        "openmp/runtime/test/ompt/parallel/not_enough_threads.c",
        "openmp/runtime/test/ompt/parallel/parallel_if0.c",
        "openmp/runtime/test/ompt/parallel/region_in_expl_task_task_frames.c",
        "openmp/runtime/test/ompt/parallel/repeated_calls.c",
        "openmp/runtime/test/ompt/parallel/serialized.c",
        "openmp/runtime/test/ompt/synchronization/barrier/explicit.c",
        "openmp/runtime/test/ompt/synchronization/barrier/for_loop.c",
        "openmp/runtime/test/ompt/synchronization/barrier/for_simd.c",
        "openmp/runtime/test/ompt/synchronization/barrier/implicit_task_data.c",
        "openmp/runtime/test/ompt/synchronization/barrier/parallel_region.c",
        "openmp/runtime/test/ompt/synchronization/barrier/sections.c",
        "openmp/runtime/test/ompt/synchronization/barrier/single.c",
        "openmp/runtime/test/ompt/synchronization/critical.c"
    ],
    "commits": [
        "[OpenMP][test] Make %p 0x prefix optional\n\nTesting `openmp` on Solaris/amd64 shows a large number of failures, all due\nto the same issue:\n\n```\n# .---command stderr------------\n# | openmp/runtime/test/ompt/misc/interoperability.cpp:67:16: error: CHECK-SAME: expected string not found in input\n# | // CHECK-SAME: parent_task_frame.reenter={{0x[0-f]+}}\n# |                ^\n# | <stdin>:5:101: note: scanning from here\n# | 281474976710658: ompt_event_parallel_begin: parent_task_id=281474976710659, parent_task_frame.exit=0, parent_task_frame.reenter=7fffbedffe90, parallel_id=281474976710661, requested_team_size=2, codeptr_ra=408b8e, invoker=2\n```\n\nThe testsuite expects pointers to be printed with a `0x` prefix when using\nthe `%p` format, while Solaris `libc` just prints them in hex without a\nprefix.\n\nHowever, this difference is completely benign.  ISO C (up to C23, 7.23.6.1)\nstates\n\n```\np\tThe argument shall be a pointer to void or a pointer to a character\n\ttype. The value of the pointer is converted to a sequence of printing\n\tcharacters, in an implementation-defined manner.\n```\n\nI saw two ways around this:\n\n- replace every instance of `%p` with a macro (`KMP_PTR_FMT`, defined as\n  `\"%p\"` or `\"0x%p\" as appropriate), or\n- adjust the testsuite to make the `0x` prefix optional\n\nThe second route seemed less intrusive and more readable, so that's what\nthis patch does.  While large, it's also completely mechanical.\n\nTested on `amd64-pc-solaris2.11` and `x86_64-pc-linux-gnu`."
    ]
}