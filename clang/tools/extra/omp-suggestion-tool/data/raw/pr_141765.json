{
    "number": 141765,
    "title": "[utils][TableGen] Implement clause aliases as alternative spellings",
    "body": "Use the spellings in the generated clause parser. The functions `get<lang>ClauseKind` and `get<lang>ClauseName` are not yet updated.\r\n\r\nThe definitions of both clauses and directives now take a list of \"Spelling\"s instead of a single string. For example\r\n```\r\ndef ACCC_Copyin : Clause<[Spelling<\"copyin\">,\r\n                          Spelling<\"present_or_copyin\">,\r\n                          Spelling<\"pcopyin\">]> { ... }\r\n```\r\n\r\nA \"Spelling\" is a versioned string, defaulting to \"all versions\".\r\n\r\nFor background information see\r\nhttps://discourse.llvm.org/t/rfc-alternative-spellings-of-openmp-directives/85507",
    "created_at": "2025-05-28T13:31:42Z",
    "merged_at": "2025-06-05T17:35:30Z",
    "user": "kparzysz",
    "files": [
        "llvm/include/llvm/Frontend/Directive/DirectiveBase.td",
        "llvm/include/llvm/Frontend/OpenACC/ACC.td",
        "llvm/include/llvm/Frontend/OpenMP/OMP.td",
        "llvm/include/llvm/TableGen/DirectiveEmitter.h",
        "llvm/test/TableGen/directive1.td",
        "llvm/test/TableGen/directive2.td",
        "llvm/test/TableGen/directive3.td",
        "llvm/utils/TableGen/Basic/DirectiveEmitter.cpp",
        "mlir/test/mlir-tblgen/directive-common.td"
    ],
    "commits": [
        "[utils][TableGen] Clarify usage of ClauseVal, rename to EnumVal\n\nThe class \"ClauseVal\" actually represents a definition of an enumeration\nvalue, and in itself it is not bound to any clause. Rename it to EnumVal\nand add a comment clarifying how it's translated into an actual enum\ndefinition in the generated source code.\n\nThere is no change in functionality.",
        "[utils][TableGen] Unify converting names to upper-camel case\n\nThere were 3 different functions in DirectiveEmitter.cpp doing essentially\nthe same thing: taking a name separated with _ or whitepace, and converting\nit to the upper-camel case. Extract that into a single function that can\nhandle different sets of separators.",
        "[utils][TableGen] Treat clause aliases equally with names\n\nThe code in DirectiveEmitter that generates clause parsers sorted\nclause names to ensure that longer names were tried before shorter\nones, in cases where a shorter name may be a prefix of a longer one.\nThis matters in the strict Fortran source format, since whitespace\nis ignored there.\n\nThis sorting did not take into account clause aliases, which are\njust alternative names. These extra names were not protected in the\nsame way, and were just appended immediately after the primary name.\n\nThis patch generates a list of pairs Record+Name, where a given\nrecord can appear multiple times with different names. Sort that\nlist and use it to generate parsers for each record.\nWhat used to be\n```\n  (\"fred\" || \"f\") >> construct<SomeClause>{} ||\n  \"foo\" << construct<OtherClause>{}\n```\nis now\n```\n  \"fred\" >> construct<SomeClause>{} ||\n  \"foo\" >> construct<OtherClause>{} ||\n  \"f\" >> construct<SomeClause>{}\n```",
        "[utils][TableGen] Implement clause aliases as alternative spellings\n\nUse the spellings in the generated clause parser. The functions\n`get<lang>ClauseKind` and `get<lang>ClauseName` are not yet updated.\n\nThe definitions of both clauses and directives now take a list of\n\"Spelling\"s instead of a single string. For example\n```\ndef ACCC_Copyin : Clause<[Spelling<\"copyin\">,\n                          Spelling<\"present_or_copyin\">,\n                          Spelling<\"pcopyin\">]> { ... }\n```\n\nA \"Spelling\" is a versioned string, defaulting to \"all versions\".\n\nFor background information see\nhttps://discourse.llvm.org/t/rfc-alternative-spellings-of-openmp-directives/85507",
        "format",
        "Use literal 0x7fffffff instead of macro INT_MAX\n\nThe macro can expand to different strings depending on the compiler,\ni.e. 0x7fffffff or 2147483647.",
        "Merge branch 'main' into users/kparzysz/spr/t07-alias-spellings",
        "Remove unnecessary {}",
        "Use raw strings",
        "Revert \"Use raw strings\"\n\nThis reverts commit cd6aa784ad63b79f39e934a594d9fa03ce5cc58a.\n\nThis fails clang-format, and the formatted change looks worse than before.",
        "Remove another {}"
    ]
}