{
    "number": 140948,
    "title": "[OpenMP][Flang] Fix OOB access for derived type mapping",
    "body": "This patch fixes unintentional OOB acess when mapping members of derived type.\r\n\r\nWhen `currentIndicesIdx` is `maxSize - 1`, i.e, it is the last member mapping, we can break from the loop. This was already the intended behaviour but using `continue` instead of `break` resulted in OOB access of `indices`.\r\n\r\nThis fixes the following test case:\r\n```\r\nmodule mod\r\n   implicit none\r\n   type :: mattype\r\n      real(4), pointer :: array(:, :, :)\r\n      integer(4) :: scalar\r\n   end type\r\n   type :: data\r\n      type(mattype) :: memb\r\n   end type\r\ncontains\r\n   subroutine us_gpumem(dat)\r\n      implicit none\r\n      type(data), pointer :: dat\r\n      !$omp target enter data map(to:dat%memb)\r\n   end subroutine us_gpumem\r\nend module mod\r\n```",
    "created_at": "2025-05-21T18:49:30Z",
    "merged_at": "2025-05-22T00:34:41Z",
    "user": "TIFitis",
    "files": [
        "flang/lib/Lower/OpenMP/Utils.cpp"
    ],
    "commits": [
        "[OpenMP][Flang] Fix OOB access for derived type mapping\n\nThis patch fixes unintentional OOB acess when mapping members of derived type."
    ]
}