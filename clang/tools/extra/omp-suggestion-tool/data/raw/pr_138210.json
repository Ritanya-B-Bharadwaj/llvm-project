{
    "number": 138210,
    "title": "[Flang][OpenMP] Generate correct present checks for implicit maps of optional allocatables",
    "body": "Currently, we do not generate the appropriate checks to check if an optional\r\nallocatable argument is present before accessing relevant components of it,\r\nin particular when creating bounds, we must generate a presence check and we\r\nmust make sure we do not generate/keep an load external to the presence check\r\nby utilising the raw address rather than the regular address of the info\r\ndata structure.\r\n\r\nSimilarly in cases for optional allocatables we must treat them like non-allocatable\r\narguments and generate an intermediate allocation that we can have as a location\r\nin memory that we can access later in the lowering without causing segfaults when\r\nwe perform \"mapping\" on it, even if the end result is an empty allocatable\r\n(basically, we shouldn't explode if someone tries to map a non-present optional,\r\nsimilar to C++ when mapping null data).",
    "created_at": "2025-05-01T22:43:28Z",
    "merged_at": "2025-05-09T11:57:46Z",
    "user": "agozillon",
    "files": [
        "flang/include/flang/Optimizer/Builder/DirectivesCommon.h",
        "flang/lib/Lower/OpenMP/OpenMP.cpp",
        "flang/lib/Optimizer/OpenMP/MapInfoFinalization.cpp",
        "flang/test/Lower/OpenMP/optional-argument-map-2.f90",
        "offload/test/offloading/fortran/optional-mapped-arguments-2.f90"
    ],
    "commits": [
        "    [Flang][OpenMP] Generate correct present checks for implicit maps of optional allocatables\n\n    Currently, we do not generate the appropriate checks to check if an optional\n    allocatable argument is present before accessing relevant components of it,\n    in particular when creating bounds, we must generate a presence check and we\n    must make sure we do not generate/keep an load external to the presence check\n    by utilising the raw address rather than the regular address of the info\n    data structure.\n\n    Similarly in cases for optional allocatables we must treat them like non-allocatable\n    arguments and generate an intermediate allocation that we can have as a location\n    in memory that we can access later in the lowering without causing segfaults when\n    we perform \"mapping\" on it, even if the end result is an empty allocatable\n    (basically, we shouldn't explode if someone tries to map a non-present optional,\n    similar to C++ when mapping null data)."
    ]
}