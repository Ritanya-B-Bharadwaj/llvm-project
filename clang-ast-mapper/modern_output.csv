Line,Source Code,AST Nodes,Explanations
1,// Simple modern C++ features example without external headers,,
2,// This is a self-contained example,,
3,,,
4,// Using aliases for types,,
5,using Size = unsigned int;,,
6,,,
7,// Class template,,
8,template <typename T>,TemplateTypeParmDecl,
9,class Container {,CXXRecordDecl; ClassTemplateSpecializationDecl; ClassTemplateDecl,
10,private:,AccessSpecDecl,
11,    T* data;,FieldDecl,
12,    Size capacity;,FieldDecl,
13,    Size count;,FieldDecl,
14,,,
15,public:,AccessSpecDecl,
16,    // Constructor,,
17,"    Container(Size size) : capacity(size), count(0) {",ParmVarDecl; CXXConstructorDecl,
18,        data = new T[size];,BinaryOperator,
19,    },,
20,,,
21,    // Destructor,,
22,    ~Container() {,CXXDestructorDecl; CompoundStmt,
23,        delete[] data;,CXXDeleteExpr,
24,    },,
25,,,
26,    // Copy constructor (Rule of Three),,
27,"    Container(const Container& other) : capacity(other.capacity), count(other.count) {",CXXConstructorDecl,
28,        data = new T[capacity];,,
29,        for (Size i = 0; i < count; i++) {,,
30,            data[i] = other.data[i];,,
31,        },,
32,    },,
33,,,
34,    // Method with auto return type,,
35,    auto size() const {,CompoundStmt; CXXMethodDecl,
36,        return count;,ReturnStmt,
37,    },,
38,,,
39,    // Method to add items,,
40,    void add(const T& item) {,ParmVarDecl; CXXMethodDecl,
41,        if (count < capacity) {,BinaryOperator; IfStmt,
42,            data[count++] = item;,BinaryOperator,
43,        },,
44,    },,
45,,,
46,    // Method to get item,,
47,    T get(Size index) const {,ParmVarDecl; CXXMethodDecl,
48,        if (index < count) {,BinaryOperator; IfStmt,
49,            return data[index];,ReturnStmt,
50,        },,
51,        return T{};,ReturnStmt,
52,    },,
53,};,,
54,,,
55,// Function template,,
56,template <typename T>,TemplateTypeParmDecl,
57,"T add(T a, T b) {",ParmVarDecl; FunctionTemplateDecl; FunctionDecl,
58,    return a + b;,ReturnStmt,
59,},,
60,,,
61,// Function with decltype,,
62,"template <typename T, typename U>",TemplateTypeParmDecl,
63,"auto addMixed(T a, U b) -> decltype(a + b) {",FunctionTemplateDecl; FunctionDecl,
64,    return a + b;,,
65,},,
66,,,
67,int main() {,CompoundStmt; FunctionDecl,
68,    // Using auto,,
69,"    auto result = add(5, 10);",DeclStmt,
70,,,
71,    // Class template instantiation,,
72,    Container<int> intContainer(10);,DeclStmt,
73,    intContainer.add(42);,ExprWithCleanups,
74,    intContainer.add(123);,ExprWithCleanups,
75,,,
76,    // Auto and decltype usage,,
77,    auto value = intContainer.get(0);,DeclStmt,
78,"    auto sum = add(value, 100);",DeclStmt,
79,,,
80,    // Using decltype,,
81,    decltype(sum) anotherValue = intContainer.get(1);,DeclStmt,
82,,,
83,    return 0;,ReturnStmt,
84,},,
